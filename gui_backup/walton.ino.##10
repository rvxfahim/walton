//<App !Start!>
// FILE: [walton.ino]
// Created by GUIslice Builder version: [0.16.b011]
//
// GUIslice Builder Generated File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<App !End!>

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "walton_GSLC.h"
#include <BlockDriver.h>
#include <FreeStack.h>
#include <MinimumSerial.h>
#include <SdFat.h>
#include <SdFatConfig.h>
#include <sdios.h>
#include <SysCall.h>
char    acTxt[31];
int nVal1;
// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Save some element references for direct access
//<Save_References !Start!>
gslc_tsElemRef* m_pElemListbox1   = NULL;
gslc_tsElemRef* m_pListSlider1    = NULL;
//<Save_References !End!>

// Define debug message function
static int16_t DebugOut(char ch) { if (ch == (char)'\n') Serial.println(""); else Serial.write(ch); return 0; }

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
// Common Button callback
bool CbBtnCommon(void* pvGui,void *pvElemRef,gslc_teTouch eTouch,int16_t nX,int16_t nY)
{
  // Typecast the parameters to match the GUI and element types
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);

  if ( eTouch == GSLC_TOUCH_UP_IN ) {
    // From the element's ID we can determine which button was pressed.
    switch (pElem->nId) {
//<Button Enums !Start!>
      case E_ELEM_BTN1:
        break;
      case E_ELEM_BTN2:
        break;
      case E_ELEM_IMAGEBTN4:
          nVal1 = gslc_ElemXSliderGetPos(pGui,m_pListSlider1);
          nVal1=nVal1+1;
          if(nVal1>100)
          nVal1=100;
          gslc_ElemXListboxSetScrollPos(pGui, m_pElemListbox1, nVal1);
        break;
      case E_ELEM_IMAGEBTN5:
          nVal1 = gslc_ElemXSliderGetPos(pGui,m_pListSlider1);
          nVal1=nVal1-1;
          if(nVal1<0)
          nVal1=0;
          gslc_ElemXListboxSetScrollPos(pGui, m_pElemListbox1, nVal1);
        break;
//<Button Enums !End!>
      default:
        break;
    }
  }
  return true;
}
//<Checkbox Callback !Start!>
//<Checkbox Callback !End!>
//<Keypad Callback !Start!>
//<Keypad Callback !End!>
//<Spinner Callback !Start!>
//<Spinner Callback !End!>
bool CbListbox(void* pvGui, void* pvElemRef, int16_t nSelId)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui, pElemRef);
  char            acTxt[MAX_STR + 1];
  
  if (pElemRef == NULL) {
    return false;
  }

  // From the element's ID we can determine which listbox was active.
  switch (pElem->nId) {
//<Listbox Enums !Start!>
    case E_ELEM_LISTBOX1:
      if (nSelId != XLISTBOX_SEL_NONE) {
        gslc_ElemXListboxGetItem(&m_gui, pElemRef, nSelId, acTxt, MAX_STR);
      }
      break;

//<Listbox Enums !End!>
    default:
      break;
  }
  return true;
}
//<Draw Callback !Start!>
//<Draw Callback !End!>

// Callback function for when a slider's position has been updated
bool CbSlidePos(void* pvGui,void* pvElemRef,int16_t nPos)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);
  int16_t         nVal;

  // From the element's ID we can determine which slider was updated.
  switch (pElem->nId) {
//<Slider Enums !Start!>
    case E_LISTSCROLL1:
      // Fetch the slider position
      nVal = gslc_ElemXSliderGetPos(pGui,m_pListSlider1);
      gslc_ElemXListboxSetScrollPos(pGui, m_pElemListbox1, nVal);
      break;

//<Slider Enums !End!>
    default:
      break;
  }

  return true;
}
//<Tick Callback !Start!>
//<Tick Callback !End!>

const uint8_t chipSelect = SS;

// file system object
SdFat sd1;

SdFile root;
SdFile file;
SdFile dir;

void setup()
{
  // ------------------------------------------------
  // Initialize
  // ------------------------------------------------
  Serial.begin(115200);
  // Wait for USB Serial 
  delay(1000);  // NOTE: Some devices require a delay after Serial.begin() before serial port can be used
  

  // ------------------------------------------------
  // Create graphic elements
  // ------------------------------------------------
  InitGUIslice_gen();
  gslc_Update(&m_gui);
  gslc_SetPageCur(&m_gui, E_PG_MAIN);
  
  delay(300);
  
  gslc_SetPageCur(&m_gui, E_PG2);
  gslc_Update(&m_gui);
  // Initialize the SD.
  if (!sd1.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd1.initErrorHalt(&Serial);
  }
  // Open root directory
  if (!dir.open("/")){
    sd1.errorHalt("dir.open failed");
  }
  gslc_InitDebug(&DebugOut);

  // Open next file in root.
  // Warning, openNext starts at the current position of dir so a
  // rewind may be necessary in your application.
  char name_of_dir[30]={0};
  char listofdir[20][30]={0};
  char name_of_file[30]={0};
  char list_of_file[20][30]={0};
  int i=0; 
  int j=0;
  while (file.openNext(&dir, O_RDONLY)) {
    
    file.printFileSize(&Serial);
    Serial.write(' ');
    file.printModifyDateTime(&Serial);
    Serial.write(' ');
    file.printName(&Serial);
    //
    if (file.isDir()&&!file.isHidden()) 
    { 
      // Indicate a directory.
      
      file.getName(name_of_dir,26);
      Serial.write('/');
      Serial.println();
      Serial.println("printing the directory name from 2D array");
      strcat(name_of_dir, "/");
      Serial.println(name_of_dir);
      strcpy(listofdir[i], name_of_dir);
      i++;
    }
    if (file.isFile())
    {
      //it is a file
      file.getName(name_of_file,26);
      strcpy(list_of_file[j], name_of_file);
      j++;
    }
    Serial.println();
    file.close();
  }
  if (dir.getError()) {
    Serial.println("openNext failed");
  } else {
    Serial.println("Done!");
   
   Serial.println("printing list of directories only");
    i=0;
    while(i<=19){
    if(listofdir[i][0]=='\0')
    {
      Serial.println("no more directories");
      break;
    }
    Serial.println(listofdir[i]);
    i++;
    }
    Serial.println("printing list of files only");
    i=0;
    while(i<=19){
    if(list_of_file[i][0]=='\0')
    {
      Serial.println("no more files");
      break;
    }
    Serial.println(list_of_file[i]);
    i++;
    }
    //total rows:
    
    i=0;
    while(i<=19){
    if(listofdir[i][0]=='\0')
    {
      Serial.println("no more directories");
      break;
    }
  
      sprintf(acTxt,listofdir[i]);
      Serial.println("acTxt value is:");
      Serial.println(acTxt);
        if (gslc_ElemXListboxInsertItemAt(&m_gui,m_pElemListbox1,i,acTxt)) {
          // successfully added new country
          j=i+1;
          }
          else
          {
            Serial.println("item entry failed");
            }   
    i++;
    }
    
    i=0;

    Serial.println("before adding files in list, here is the first file name:");
    Serial.println(list_of_file[0]);
    while(i<=19){
    if(list_of_file[i][0]=='\0')
    {
      Serial.println("no more files");
      break;
    }
  
      sprintf(acTxt,list_of_file[i]);
        if (gslc_ElemXListboxInsertItemAt(&m_gui,m_pElemListbox1,j,acTxt)) {
          // successfully added new country
          }
          else
          {
            Serial.println("item entry failed");
            }  
    i++;
    j++;
    }
    

    
  }
  
}

// -----------------------------------
// Main event loop
// -----------------------------------
void loop()
{

  // ------------------------------------------------
  // Update GUI Elements
  // ------------------------------------------------
  
  //TODO - Add update code for any text, gauges, or sliders
  
  // ------------------------------------------------
  // Periodically call GUIslice update function
  // ------------------------------------------------
  gslc_Update(&m_gui);
    
}
